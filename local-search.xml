<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>家人们，学前端了</title>
    <link href="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/"/>
    <url>/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h2 id="vue3.0入门">Vue3.0入门</h2><h3 id="vue3基本介绍">01-vue3基本介绍</h3><blockquote><p>知道：vue3的现状以及它特点</p></blockquote><p>大致内容：</p><ul><li>Vue3的现状</li><li>相关文档</li><li>了解框架优点特点</li></ul><p>具体落地：</p><ol type="1"><li>Vue3的现状</li></ol><p>2020 年 9 月 18 日发布，许多开发者还在观望。2022 年 2 月 7日称为默认版本，意味着vue3是现在也是未来。</p><table><thead><tr><th style="text-align: left;">组件（插件）名称</th><th style="text-align: left;">官方地址</th><th style="text-align: left;">简介</th></tr></thead><tbody><tr><td style="text-align: left;">ant-design-vue</td><td style="text-align: left;">https://antdv.com/docs/vue/introduce-cn/</td><td style="text-align: left;">ant-design-vue 是 Ant Design 的 Vue实现，组件的风格与 Ant Design 保持同步</td></tr><tr><td style="text-align: left;">element-plus</td><td style="text-align: left;">https://element-plus.gitee.io/#/zh-CN</td><td style="text-align: left;">ElementPlus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0的桌面端组件库</td></tr><tr><td style="text-align: left;">vant</td><td style="text-align: left;">https://vant-contrib.gitee.io/vant/v3/#/zh-CN</td><td style="text-align: left;">有赞前端团队开源的移动端组件库，于 2016年开源，已持续维护 4 年时间</td></tr><tr><td style="text-align: left;">Naive UI</td><td style="text-align: left;">https://www.naiveui.com/zh-CN/</td><td style="text-align: left;">一个 Vue 3 组件库比较完整，主题可调，使用TypeScript，不算太慢，有点意思</td></tr><tr><td style="text-align: left;">VueUse</td><td style="text-align: left;">https://vueuse.org/</td><td style="text-align: left;">基于composition组合api的常用集合，小兔鲜儿项目会部分使用</td></tr></tbody></table><ol start="2" type="1"><li>相关文档<ol type="1"><li>Vue3 中文文档 https://vue3js.cn/docs/zh/</li><li>Vue3 设计理念 https://vue3js.cn/vue-composition/</li></ol></li><li>了解框架优点特点<ol type="1"><li>首次渲染更快</li><li>diff算法更快</li><li>内存占用更少</li><li>打包体积更小</li><li>更好的Typescript支持</li><li><font color="red">Composition API </font> 组合API</li></ol></li></ol><p><strong>总结：</strong></p><ul><li>前端学习vue3是必须的，学习vue3主要学习组合API的使用。</li></ul><h3 id="vue3开发环境">02-vue3开发环境</h3><blockquote><p>掌握：使用vue-cli完成项目创建知道初始化代码含义</p></blockquote><p>大致步骤：</p><ul><li>创建项目</li><li>默认代码</li></ul><p>具体落地：</p><ol type="1"><li>创建项目</li></ol><figure><img src="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/image-20220308122522939.png" alt="image-20220308122522939"><figcaption aria-hidden="true">image-20220308122522939</figcaption></figure><ol start="2" type="1"><li>默认代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 导入一个创建App的函数</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 2. 导入根组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">// 3. 根据根组件创建vue应用实例，挂载到html的app元素上</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>其他发现：</p><ul><li>vue3的组件组件根标签不再是强制，支持代码片段。</li></ul><p><strong>总结：</strong></p><ul><li>createApp 创建vue应用实例，组件支持代码片段代码</li></ul><h3 id="vue3组合api介绍">03-vue3组合API介绍</h3><blockquote><p>知道：什么是选项API什么是组合API，对比它们之间的代码组织特点</p></blockquote><p>大致内容：</p><ul><li>选项API与组合API</li><li>它们组织代码特点</li></ul><p>具体落地：</p><ol type="1"><li>选项API，data 选项写数据，methods 选项写逻辑，...<ol type="1"><li>代码分散，一个功能会拆分在各个选项中，不利于维护不利于复用</li></ol></li><li>组合API，数据、逻辑和其他都在setup内写<ol type="1"><li>代码集中，一个功能可以组织在一起，利于维护，可抽离可复用</li></ol></li></ol><figure><img src="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/image-20220308131051174.png" alt="image-20220308131233377"><figcaption aria-hidden="true">image-20220308131233377</figcaption></figure><p><strong>总结：</strong></p><ul><li>data methods 是选项API，写在 setup 里的就是组合API</li><li>如果你使用了vue3那么使用组合API一定是不错的选择。</li></ul><h3 id="vue3组合api体验">04-vue3组合API体验</h3><blockquote><p>体验：组合API实现couter和显示隐藏</p></blockquote><p>大致步骤：</p><ul><li>使用选项API实现</li><li>使用组合API实现</li><li>抽离复用逻辑</li></ul><p>落地代码：</p><ol type="1"><li>选项API实现</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;toggle&quot;&gt;显示隐藏图片&lt;/button&gt;<br>  &lt;img v-show=&quot;show&quot; alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt;<br>  &lt;hr /&gt;<br>  计数器：&#123;&#123; count &#125;&#125; &lt;button @click=&quot;increment&quot;&gt;累加&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  data() &#123;<br>    return &#123;<br>      show: true,<br>      count: 0,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    toggle() &#123;<br>      this.show = !this.show;<br>    &#125;,<br>    increment() &#123;<br>      this.count++;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>组合API实现</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;toggle&quot;&gt;显示隐藏图片&lt;/button&gt;<br>  &lt;img v-show=&quot;show&quot; alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt;<br>  &lt;hr /&gt;<br>  计数器：&#123;&#123; count &#125;&#125; &lt;button @click=&quot;increment&quot;&gt;累加&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup () &#123;<br>    // 显示隐藏<br>    const show = ref(true)<br>    const toggle = () =&gt; &#123;<br>      show.value = !show.value<br>    &#125;<br>    // 计数器<br>    const count = ref(0)<br>    const increment = () =&gt; &#123;<br>      count.value ++<br>    &#125;<br><br>    return &#123; show, toggle, count, increment &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>复用逻辑</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;button @click=&quot;toggle&quot;&gt;显示隐藏图片&lt;/button&gt;<br>  &lt;img v-show=&quot;show&quot; alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt;<br>  &lt;hr /&gt;<br>  计数器：&#123;&#123; count &#125;&#125; &lt;button @click=&quot;increment&quot;&gt;累加&lt;/button&gt;<br>  &lt;hr /&gt;<br>  计数器：&#123;&#123; count1 &#125;&#125; &lt;button @click=&quot;increment1&quot;&gt;累加&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>// 逻辑抽离<br>const useCounter = () =&gt; &#123;<br>  const count = ref(0);<br>  const increment = () =&gt; &#123;<br>    count.value++;<br>  &#125;;<br>  return &#123; count, increment &#125;;<br>&#125;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 显示隐藏<br>    const show = ref(true);<br>    const toggle = () =&gt; &#123;<br>      show.value = !show.value;<br>    &#125;;<br><br>    // 逻辑复用<br>    const &#123; count, increment &#125; = useCounter();<br>    const &#123; count: count1, increment: increment1 &#125; = useCounter();<br><br>    return &#123; show, toggle, count, increment, count1, increment1 &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>体会组合API对逻辑复用和代码维护支撑，将来在项目中我们会有实践。</li></ul><h3 id="组合api-setup函数">05-组合API-setup函数</h3><blockquote><p>掌握：setup使用和它的执行时机。</p></blockquote><p>大致内容：</p><ul><li>setup的基本用法</li><li>确定它的执行时机</li></ul><p>具体落地：</p><ul><li>setup是一个新的配置选项，它是一个函数，该函数是组合API的入口函数。</li><li>setup函数只会在组件初始化执行一次，且在beforeCreate生命周期函数之前执行。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;根组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 组合API入口函数<br>    console.log(&quot;setup执行了&quot;);<br>    console.log(this);<br>  &#125;,<br>  beforeCreate() &#123;<br>    console.log(&quot;beforeCreate执行了&quot;);<br>    console.log(this);<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>steup在beforeCreate之前执行，函数内this是undefined不是组件实例</li></ul><h3 id="组合api-reactive函数">06-组合API-reactive函数</h3><blockquote><p>掌握：使用reactive函数把普通对象转换成响应式数据</p></blockquote><p>使用步骤：</p><ul><li>从 <code>vue</code> 中导出 <code>reactive</code> 函数</li><li>在 <code>setup</code> 函数中，使用 <code>reactive</code>函数，传入一个普通对象，返回一个响应式数据对象</li><li>最后 <code>setup</code>函数返回一个对象，包含该响应式对象即可，模板中可使用</li></ul><p>落地代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;姓名：&#123;&#123;state.name&#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;年龄：&#123;&#123;state.age&#125;&#125; &lt;button @click=&quot;state.age++&quot;&gt;一年又一年&lt;/button&gt;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1. 导入函数<br>import &#123; reactive &#125; from &quot;vue&quot;; <br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 2. 创建响应式数据对象<br>    const state = reactive(&#123; name: &#x27;tom&#x27;, age: 18 &#125;)<br>    // 3. 返回数据<br>    return &#123; state &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>使用 <code>reactive</code> 传入普通对象可以转换成响应式对象</li><li>可以转换简单数据吗？不能</li></ul><h3 id="组合api-ref函数">07-组合API-ref函数</h3><blockquote><p>掌握：使用ref函数创建响应式数据</p></blockquote><p>使用步骤：</p><ul><li>从 <code>vue</code> 中导出 <code>ref</code> 函数</li><li>在 <code>setup</code> 函数中，使用 <code>ref</code>函数，传入一个普通数据（简单or复杂），返回一个响应式数据</li><li>最后 <code>setup</code> 函数返回一个对象，包含该响应式数据即可</li><li>注意：使用 <code>ref</code> 创建的数据，<code>js</code> 中需要<code>.value</code> ，<code>template</code> 中可省略</li></ul><p>落地代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;<br>      计数器：&#123;&#123; count &#125;&#125;<br>      &lt;button @click=&quot;count++&quot;&gt;累加1&lt;/button&gt;<br>      &lt;!-- template中使用可省略.value --&gt;<br>      &lt;button @click=&quot;increment&quot;&gt;累加10&lt;/button&gt;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1. 导入函数<br>import &#123; ref &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 2. 创建响应式数据对象<br>    const count = ref(0);<br>    const increment = () =&gt; &#123;<br>      // js中使用需要.value<br>      count.value += 10;<br>    &#125;;<br>    // 3. 返回数据<br>    return &#123; count, increment &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><code>ref</code>可以把简单数据或者复杂数据转换成响应式数据，注意使用加上<code>.value</code>，不过模板可省略。</li><li>疑问：定义响应式数据使用 <code>ref</code> 还是 <code>reactive</code>呢？</li></ul><h3 id="组合api-reactive和ref的选择">08-组合API-reactive和ref的选择</h3><blockquote><p>知道：在定义响应式数据的时候如何选择reactive和ref</p></blockquote><p>开始分析：</p><ul><li><code>reactive</code>可以转换对象成为响应式数据对象，但是不支持简单数据类型。</li><li><code>ref</code>可以转换简单数据类型为响应式数据对象，也支持复杂数据类型，但是操作的时候需要<code>.value</code> 。</li><li>它们各有特点，现在也没有最佳实践，没有明显的界限，所有大家可以自由选择。</li></ul><p><strong>推荐用法：</strong></p><ul><li>如果能确定数据是对象且字段名称也确定，可使用 <code>reactive</code>转成响应式数据，其他一概使用 <code>ref</code> 。这样就没有 心智负担。</li></ul><p>参考代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 明确表单对象有两个字段</span><br><span class="hljs-keyword">const</span> form = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 2. 后台返回的数据对象</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/100&#x27;</span>)<br>data.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>在定义响应式数据的函数选择上，遵循：确定字段的对象使用<code>reactive</code> 其他都使用 <code>ref</code> 函数</li></ul><h3 id="组合api-torefs函数">09-组合API-toRefs函数</h3><blockquote><p>掌握：在使用reactive创建的响应式数据被展开或解构的时候使用toRefs保持响应式</p></blockquote><p>大致步骤：</p><ul><li>使用 <code>reactive</code> 创建响应式数据，踩坑</li><li>使用 <code>toRefs</code> 处理响应式数据，爬坑</li><li><code>toRefs</code> 函数的作用，与使用场景</li></ul><p>落地代码：</p><ul><li>基础案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;姓名：&#123;&#123; user.name &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;年龄：&#123;&#123; user.age &#125;&#125; &lt;button @click=&quot;user.age++&quot;&gt;一年又一年&lt;/button&gt;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const user = reactive(&#123; name: &quot;tom&quot;, age: 18 &#125;);<br>    return &#123; user &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用 <code>reactive</code> 创建响应式数据，踩坑</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;template&gt;<br>  &lt;div&gt;<br><span class="hljs-addition">+    &lt;p&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-addition">+    &lt;!-- 响应式丢失 --&gt;</span><br><span class="hljs-addition">+    &lt;p&gt;年龄：&#123;&#123; age &#125;&#125; &lt;button @click=&quot;age++&quot;&gt;一年又一年&lt;/button&gt;&lt;/p&gt;</span><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const user = reactive(&#123; name: &quot;tom&quot;, age: 18 &#125;);<br><span class="hljs-addition">+    return &#123; ...user &#125;;</span><br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用 <code>toRefs</code> 处理响应式数据，爬坑</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+import &#123; reactive, toRefs &#125; from &quot;vue&quot;;</span><br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const user = reactive(&#123; name: &quot;tom&quot;, age: 18 &#125;);<br><span class="hljs-addition">+    // 展开前使用 toRefs 处理    </span><br><span class="hljs-addition">+    return &#123; ...toRefs(user) &#125;;</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>toRefs</code> 函数的作用，与使用场景<ul><li>作用：把对象中的每一个属性做一次包装成为响应式数据</li><li>响应式数据展开的时候使用，解构响应式数据的时候使用</li></ul></li></ul><p><strong>总结：</strong></p><ul><li>当去解构和展开 <code>reactive</code> 的响应式数据对象使用<code>toRefs</code> 保持响应式</li></ul><h3 id="组合api-computed函数">10-组合API-computed函数</h3><blockquote><p>掌握：使用 computed 函数定义计算属性</p></blockquote><p>大致步骤：</p><ul><li>从 <code>vue</code> 中导出 <code>computed</code> 函数</li><li>在 <code>setup</code> 函数中，使用 <code>computed</code>函数，传入一个函数，函数返回计算好的数据</li><li>最后 <code>setup</code>函数返回一个对象，包含该计算属性数据即可，然后模板内使用</li></ul><figure><img src="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/image-20220308212303686.png" alt="image-20220308212303686"><figcaption aria-hidden="true">image-20220308212303686</figcaption></figure><p>落地代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;分数：&#123;&#123; scoreList &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;优秀：&#123;&#123; betterList &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, computed &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const scoreList = ref([80, 100, 90, 70, 60]);<br>    // 计算属性<br>    const betterList = computed(() =&gt;<br>      scoreList.value.filter((item) =&gt; item &gt;= 90)<br>    );<br><br>    // 改变数据，计算属性改变<br>    setTimeout(() =&gt; &#123;<br>      scoreList.value.push(92, 66);<br>    &#125;, 3000);<br><br>    return &#123;<br>      scoreList,<br>      betterList,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>使用 <code>computed</code>定义计算属性，场景：当需要依赖一个数据得到新的数据使用计算属性</li></ul><h3 id="组合api-watch函数">11-组合API-watch函数</h3><blockquote><p>掌握：使用watch函数监听数据的变化</p></blockquote><p>大致内容：</p><ul><li>使用 <code>watch</code> 监听一个响应式数据</li><li>使用 <code>watch</code> 监听多个响应式数据</li><li>使用 <code>watch</code> 监听响应式对象数据中的一个属性(简单)</li><li>使用 <code>watch</code>监听响应式对象数据中的一个属性(复杂)，配置深度监听</li><li>使用 <code>watch</code> 监听，配置默认执行</li></ul><p>落地代码：</p><ul><li>使用 <code>watch</code> 监听一个响应式数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;p&gt;计数器：&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, watch &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const count = ref(0);<br>    // 1. 监听一个响应式数据<br>    // watch(数据, 改变后回调函数)<br>    watch(count, () =&gt; &#123;<br>      console.log(&quot;count改变了&quot;);<br>    &#125;);<br>    // 2s改变数据<br>    setTimeout(() =&gt; &#123;<br>      count.value++;<br>    &#125;, 2000);<br>    return &#123; count &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用 <code>watch</code> 监听多个响应式数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;p&gt;计数器：&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;<br>    姓名：&#123;&#123; user.name &#125;&#125; 性别：&#123;&#123; user.info.gender &#125;&#125; 年龄：&#123;&#123; user.info.age &#125;&#125;<br>  &lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, ref, watch &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const count = ref(0);<br>    const user = reactive(&#123;<br>      name: &quot;tom&quot;,<br>      info: &#123;<br>        gender: &quot;男&quot;,<br>        age: 18,<br>      &#125;,<br>    &#125;);<br>    // 2. 监听多个响应式数据<br>    // watch([数据1, 数据2, ...], 改变后回调函数)<br>    watch([count, user], () =&gt; &#123;<br>      console.log(&quot;数据改变了&quot;);<br>    &#125;);<br>    // 2s改变数据<br>    setTimeout(() =&gt; &#123;<br>      count.value++;<br>    &#125;, 2000);<br>    // 4s改变数据<br>    setTimeout(() =&gt; &#123;<br>      user.info.age++;<br>    &#125;, 4000);<br>    return &#123; count, user &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用 <code>watch</code> 监听响应式对象数据中的一个属性(简单)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;p&gt;<br>    姓名：&#123;&#123; user.name &#125;&#125; 性别：&#123;&#123; user.info.gender &#125;&#125; 年龄：&#123;&#123; user.info.age &#125;&#125;<br>  &lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, watch &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const user = reactive(&#123;<br>      name: &quot;tom&quot;,<br>      info: &#123;<br>        gender: &quot;男&quot;,<br>        age: 18,<br>      &#125;,<br>    &#125;);<br>    // 3. 监听响应式对象数据的一个数据，简单类型<br>    // watch(()=&gt;数据, 改变后回调函数)<br>    watch(()=&gt;user.name, () =&gt; &#123;<br>      console.log(&quot;数据改变了&quot;);<br>    &#125;);<br>    // 2s改变数据<br>    setTimeout(() =&gt; &#123;<br>      user.name = &#x27;jack&#x27;;<br>    &#125;, 2000);<br>    // 4s改变数据<br>    setTimeout(() =&gt; &#123;<br>      user.info.age = 60;<br>    &#125;, 4000);<br>    return &#123; user &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用 <code>watch</code>监听响应式对象数据中的一个属性(复杂)，配置深度监听</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;p&gt;<br>    姓名：&#123;&#123; user.name &#125;&#125; 性别：&#123;&#123; user.info.gender &#125;&#125; 年龄：&#123;&#123; user.info.age &#125;&#125;<br>  &lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, watch &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    const user = reactive(&#123;<br>      name: &quot;tom&quot;,<br>      info: &#123;<br>        gender: &quot;男&quot;,<br>        age: 18,<br>      &#125;,<br>    &#125;);<br>    // 4. 监听响应式对象数据的一个数据，复杂类型<br>    // watch(()=&gt;数据, 改变后回调函数, &#123;deep: true&#125;)<br>    watch(<br>      () =&gt; user.info,<br>      () =&gt; &#123;<br>        console.log(&quot;数据改变了&quot;);<br>      &#125;,<br>      &#123;<br>        // 开启深度监听<br>        deep: true,<br>      &#125;<br>    );<br>    // 2s改变数据<br>    setTimeout(() =&gt; &#123;<br>      user.info.age = 60;<br>    &#125;, 2000);<br>    return &#123; user &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>使用 <code>watch</code> 监听，配置默认执行</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">      &#123;<br>        // 开启深度监听<br>        deep: true,<br><span class="hljs-addition">+        // 默认执行一次</span><br><span class="hljs-addition">+        immediate: true</span><br>      &#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><code>watch('需要监听的数据',数据改变执行函数,配置对象)</code>来进行数据的侦听</li><li>数据：单个数据，多个数据，函数返回对象属性，属性复杂需要开启深度监听</li><li>配置对象：<code>deep</code> 深度监听 <code>immediate</code>默认执行</li></ul><h3 id="组合api-生命周期函数">12-组合API-生命周期函数</h3><blockquote><p>掌握：vue3的常用生命周期函数</p></blockquote><p>使用步骤：</p><ol type="1"><li>先从vue中导入以<code>on打头</code>的生命周期钩子函数</li><li>在setup函数中调用生命周期函数并传入回调函数</li><li>生命周期钩子函数可以调用多次</li></ol><p>具体内容：</p><ul><li>Vue3和vue2的生命周期对比</li></ul><table><thead><tr><th>选项式API下的生命周期函数使用</th><th>组合式API下的生命周期函数使用</th></tr></thead><tbody><tr><td>beforeCreate</td><td>不需要（直接写到setup函数中）</td></tr><tr><td>created</td><td>不需要（直接写到setup函数中）</td></tr><tr><td>beforeMount</td><td><code>onBeforeMount</code></td></tr><tr><td>mounted</td><td><code>onMounted</code></td></tr><tr><td>beforeUpdate</td><td><code>onBeforeUpdate</code></td></tr><tr><td>updated</td><td><code>onUpdated</code></td></tr><tr><td>beforeDestroyed</td><td><code>onBeforeUnmount</code></td></tr><tr><td>destroyed</td><td><code>onUnmounted</code></td></tr><tr><td>activated</td><td><code>onActivated</code></td></tr><tr><td>deactivated</td><td><code>onDeactivated</code></td></tr></tbody></table><ul><li>参考代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;生命周期函数&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; onMounted &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 生命周期函数：组件渲染完毕<br>  <br>    onMounted(()=&gt;&#123;<br>      console.log(&#x27;onMounted触发了&#x27;)<br>    &#125;)<br><br>    onMounted(()=&gt;&#123;<br>      console.log(&#x27;onMounted也触发了&#x27;)<br>    &#125;)<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>常用的 <code>onMounted</code>组件渲染完毕：发请求，操作dom，初始化图表...</li></ul><h3 id="组合api-父子通讯">13-组合API-父子通讯</h3><blockquote><p>掌握：在组合API中父子通讯的过程</p></blockquote><p>知识梳理：</p><ul><li>组合API中的父传子数据通讯</li><li>组合API中的子传父数据通讯</li></ul><figure><img src="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/1.png" alt="截屏2022-03-09 下午1.39.45"><figcaption aria-hidden="true">截屏2022-03-09 下午1.39.45</figcaption></figure><p>具体代码：</p><ol type="1"><li>父传子</li></ol><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    父组件：&#123;&#123; money &#125;&#125;<br>    &lt;hr /&gt;<br>    &lt;SonCom :money=&quot;money&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import SonCom from &quot;./SonCom.vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123; SonCom &#125;,<br>  setup () &#123;<br>    const money = ref(10000)<br>    return &#123; money &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot;&gt;子组件：&#123;&#123; money &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;SonCom&quot;,<br>  props: &#123;<br>    money: &#123;<br>      type: Number,<br>    &#125;,<br>  &#125;,<br>  setup(props) &#123;<br>    console.log(&quot;数据money：&quot;, props.money);<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>子传父</li></ol><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot;&gt;<br>    子组件：&#123;&#123; money &#125;&#125; &lt;button @click=&quot;changeMoney&quot;&gt;买手机&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;SonCom&quot;,<br>  props: &#123;<br>    money: &#123;<br>      type: Number,<br>    &#125;,<br>  &#125;,<br>  // vue3规范，自定义事件需要在这声明<br>  emits: [&quot;change-money&quot;],<br>  setup(props, &#123; emit &#125;) &#123;<br>    console.log(&quot;数据money：&quot;, props.money);<br>    // 通过emit触发自定义事件<br>    const changeMoney = () =&gt; &#123;<br>      emit(&quot;change-money&quot;, props.money - 3999);<br>    &#125;;<br>    return &#123; changeMoney &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    父组件：&#123;&#123; money &#125;&#125;<br>    &lt;hr /&gt;<br>    &lt;SonCom :money=&quot;money&quot; @change-money=&quot;money = $event&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import SonCom from &quot;./SonCom.vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123; SonCom &#125;,<br>  setup () &#123;<br>    const money = ref(10000)<br>    return &#123; money &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>父传子，通过props传递，setup函数<code>第一个参数就是props</code></li><li>子传父，通过emit函数，setup函数<code>第二个参数解构出emit函数</code>，emits选项需要声明自定义事件名称</li></ul><h3 id="组合api-provide和inject函数">14-组合API-provide和inject函数</h3><blockquote><p>掌握：通过 provide 和 inject 函数实现跨级组件通讯</p></blockquote><p>大致内容：</p><ul><li>后代组件 <code>使用</code> 祖先组件的数据，祖传后</li><li>后代组件 <code>修改</code> 祖先组件的数据，后传祖</li></ul><figure><img src="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/1646882003452.png" alt="1646882003452"><figcaption aria-hidden="true">1646882003452</figcaption></figure><p>具体落地：</p><ul><li>祖先传递后代<ul><li><code>provide</code> 和 <code>inject</code> 从 <code>vue</code>中导入</li><li><code>provide('数据名称', 响应式数据)</code>提供数据的祖先组件使用</li><li><code>const data = inject('数据名称')</code>注入数据的后代组件使用</li></ul></li></ul><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    根组件：&#123;&#123; money &#125;&#125;<br>    &lt;hr /&gt;<br>    &lt;ParentCom /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; ref, provide &#125; from &#x27;vue&#x27;;<br>import ParentCom from &quot;./ParentCom.vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123; ParentCom &#125;,<br>  setup () &#123;<br>    const money = ref(10000)<br>    // 提供数据给后代<br>    provide(&#x27;money&#x27;, money)<br>    return &#123; money &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>ParentCom.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;parent-com&quot; style=&quot;padding-left:50px&quot;&gt;<br>    父组件：<br>    &lt;hr /&gt;<br>    &lt;ChildCom /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import ChildCom from &#x27;./ChildCom.vue&#x27;<br>export default &#123;<br>  name: &#x27;ParentCom&#x27;,<br>  components: &#123; ChildCom &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>ChildCom.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-com&quot; style=&quot;padding-left:50px&quot;&gt;<br>    子组件：&#123;&#123;money&#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; inject &#125; from &#x27;vue&#x27;<br>export default &#123;<br>  name: &#x27;ChildCom&#x27;,<br>  setup () &#123;<br>    // 注入祖先组件提供的数据<br>    const money = inject(&#x27;money&#x27;)<br>    return &#123; money &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>后代传递祖先<ul><li><code>provide('数据名称', 修改函数)</code>提供函数的祖先组件使用</li><li><code>const changeMoney = inject('数据名称')</code>注入函数的后代组件使用</li><li>遵循：数据由谁定义，由谁修改。</li></ul></li></ul><p><code>App.vue</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    根组件：&#123;&#123; money &#125;&#125;<br>    &lt;hr /&gt;<br>    &lt;ParentCom /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; ref, provide &#125; from &#x27;vue&#x27;;<br>import ParentCom from &quot;./ParentCom.vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123; ParentCom &#125;,<br>  setup () &#123;<br>    const money = ref(10000)<br>    // 提供数据给后代<br>    provide(&#x27;money&#x27;, money)<br><span class="hljs-addition">+    // 提供函数给后代    </span><br><span class="hljs-addition">+    provide(&#x27;changeMoney&#x27;, newMoney =&gt; &#123;</span><br><span class="hljs-addition">+      money.value = newMoney</span><br><span class="hljs-addition">+    &#125;)</span><br>    return &#123; money &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><code>ChildCom.vue</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;template&gt;<br>  &lt;div class=&quot;child-com&quot; style=&quot;padding-left: 50px&quot;&gt;<br>    子组件：&#123;&#123; money &#125;&#125;<br><span class="hljs-addition">+    &lt;button @click=&quot;changeMoney(money - 3999)&quot;&gt;买手机&lt;/button&gt;</span><br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; inject &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;ChildCom&quot;,<br>  setup() &#123;<br>    // 注入祖先组件提供的数据<br>    const money = inject(&quot;money&quot;);<br><span class="hljs-addition">+    // 注入祖先组件提供的函数</span><br><span class="hljs-addition">+    const changeMoney = inject(&quot;changeMoney&quot;);</span><br><span class="hljs-addition">+    return &#123; money , changeMoney&#125;;</span><br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>使用 <code>provide</code> 提供数据，使用 <code>inject</code>注入数据。<ul><li>可以传递数据（使用数据），可以传递函数（修改数据）</li></ul></li></ul><h3 id="组合api-ref属性">15-组合API-ref属性</h3><blockquote><p>掌握：使用 ref 属性获取DOM元素或者组件实例</p></blockquote><p>大致内容：</p><ul><li>通过 ref 属性获取DOM元素</li><li>通过 ref 属性获取组件实例</li></ul><p>落地代码：</p><ol type="1"><li>通过 ref 属性获取DOM元素</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;!-- 2. 使用ref属性绑定响应式数据 --&gt;<br>    &lt;h1 ref=&quot;refH&quot;&gt;App组件&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup () &#123;<br>    // 1. 声明响应式数据并返回给模板使用<br>    const refH = ref(null)<br><br>    // 3. 组件渲染后查看dom<br>    onMounted(()=&gt;&#123;<br>      console.log(refH.value)<br>    &#125;)<br><br>    return &#123; refH &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>通过 ref 属性获取组件实例</li></ol><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    App组件<br>    &lt;!-- 2. 使用ref属性绑定响应式 --&gt;<br>    &lt;ChildCom ref=&quot;refCom&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;<br>import ChildCom from &quot;./ChildCom.vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  components: &#123; ChildCom &#125;,<br>  setup () &#123;<br>    // 1. 声明响应式数据并返回给模板使用<br>    const refCom = ref(null)<br><br>    // 3. 组件渲染后查看组件实例，可以调用组件函数<br>    onMounted(()=&gt;&#123;<br>      console.log(refCom.value)<br>      refCom.value.show()<br>    &#125;)<br><br>    return &#123; refCom &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>ChildCom.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child-com&quot;&gt;<br>    子组件<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;ChildCom&#x27;,<br>  setup () &#123;<br>    const show = () =&gt; &#123;<br>      console.log(&#x27;组件内函数执行了&#x27;)<br>    &#125;<br>    return &#123; show &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>通过ref函数创建一个数据，给标签或者组件使用ref属性绑定这个数据，组件渲染后可获取dom或者组件实例。</li></ul><h3 id="vue3的一些破坏性改变">16-vue3的一些破坏性改变</h3><blockquote><p>了解：一些不兼容vue2的一些改变</p></blockquote><p>参考文档：<a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#%E9%9D%9E%E5%85%BC%E5%AE%B9%E7%9A%84%E5%8F%98%E6%9B%B4">非兼容的变更</a></p><p>不再支持：</p><ul><li>过滤器 <code>filter</code></li><li>同步修饰符 <code>:visible.sync="dialogFormVisible"</code></li></ul><p>怎么替代：</p><ul><li>函数（过滤器）</li><li>v-model （支持多个数据双向绑定）<ul><li>v-model="数据"</li><li>V-model:visible="数据"</li></ul></li></ul><p><strong>总结：</strong></p><ul><li>vue3移除了过滤器，sync修饰符，项目中有实践。</li></ul><h3 id="vue3综合案例">17-vue3综合案例</h3><blockquote><p>掌握：axios 和 组合API 配合开发</p></blockquote><figure><img src="/2024/07/23/%E5%AE%B6%E4%BA%BA%E4%BB%AC%EF%BC%8C%E5%AD%A6%E5%89%8D%E7%AB%AF%E4%BA%86/1646970811328.png" alt="1646970811328"><figcaption aria-hidden="true">1646970811328</figcaption></figure><h4 id="模板案例准备">1）模板案例准备</h4><ul><li><p>克隆代码<code>git@gitee.com:zhoushugang/vue3-case.git</code></p></li><li><p>模板代码分析</p></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">import &#123; createApp &#125; from &#x27;vue&#x27;<br>import App from &#x27;./App.vue&#x27;<br><br><span class="hljs-addition">+// element-plus 支持vue3的ui组件库，使用和element-ui一致 </span><br><span class="hljs-addition">+import ElementUI from &#x27;element-plus&#x27;</span><br><span class="hljs-addition">+import &#x27;element-plus/dist/index.css&#x27;</span><br><br><span class="hljs-addition">+// use(ElementUI) 使用组件库</span><br><span class="hljs-addition">+createApp(App).use(ElementUI).mount(&#x27;#app&#x27;)</span><br></code></pre></td></tr></table></figure><ul><li>需求说明<ul><li>列表渲染</li><li>删除数据</li><li>使用组合API实现</li></ul></li></ul><h4 id="实现案例功能">2）实现案例功能</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;el-table :data=&quot;list&quot;&gt;<br>      &lt;el-table-column label=&quot;ID&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot; width=&quot;150&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;籍贯&quot; prop=&quot;place&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;操作&quot; width=&quot;100&quot;&gt;<br>        &lt;template v-slot=&quot;&#123; row &#125;&quot;&gt;<br>          &lt;el-button type=&quot;text&quot; @click=&quot;delRow(row.id)&quot;&gt;删除&lt;/el-button&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123; onMounted, ref &#125; from &quot;vue&quot;;<br>import axios from &#x27;axios&#x27;<br><br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 获取列表数据<br>    const list = ref([])<br>    const geList = async () =&gt; &#123;<br>      const res = await axios.get(&#x27;/list&#x27;)<br>      list.value = res.data<br>    &#125;<br><br>    onMounted(() =&gt; &#123;<br>      geList()<br>    &#125;)<br><br>    // 删除数据<br>    const delRow = async (id) =&gt; &#123;<br>      await axios.delete(`/del?id=$&#123;id&#125;`)<br>      geList()<br>    &#125;<br><br>    return &#123; list, delRow &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br>&lt;style&gt;<br>.app &#123;<br>  width: 980px;<br>  margin: 100px auto 0;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="每日总结">18-每日总结</h3><ul><li>Vue3 组合API的入口？<ul><li>setup()</li></ul></li><li>如果明确知道数据是对象且知道字段名称，用什么函数什么响应式数据？<ul><li>reactive()</li></ul></li><li>如果不知道数据类和字段，使用什么声明响应式数据？<ul><li>ref()</li></ul></li><li>如果去解构 reactive 声明的数据对象，需要使用那个函数保持响应式特性？<ul><li>toRefs()</li></ul></li><li>组合API中定义计算属性？<ul><li>Computed(()=&gt;计算后的数据)</li></ul></li><li>使用watch进行侦探数据的改变<ul><li>监听一个数据<ul><li>watch(数据,()=&gt;{})</li></ul></li><li>监听多个数据<ul><li>watch([数据1,数据2],()=&gt;{})</li></ul></li><li>监听对象中的一个属性，简单数据<ul><li>watch(()=&gt;对象.属性,()=&gt;{})</li></ul></li><li>监听对象中的一个属性，复杂数据<ul><li>watch(()=&gt;对象.属性,()=&gt;{},{deep:true})</li></ul></li><li>如果想立即执行<ul><li>watch(()=&gt;对象.属性,()=&gt;{},{deep:true,immediate:true})</li></ul></li></ul></li><li>声明周期钩子函数，那个钩子发请求？<ul><li>onMounted</li></ul></li><li>父子通讯<ul><li>父给子：props 传递，模板中直接使用，setup(props){ // 使用props}</li><li>子给父：setup(props,{emit}){}通过emit触发事件，规范：emits选项需要显性声明</li></ul></li><li>跨级组件通讯<ul><li>祖先到后代<ul><li>祖先 provide('money', money)</li><li>后代 injec('money')</li></ul></li><li>后代到祖先<ul><li>祖先 provide('修改数据函数', (newVal)=&gt;{ moeny.value=newVal})</li><li>后代 inject('修改数据函数') 调用这个函数传递需要改的值</li></ul></li></ul></li><li>通过获取dom元素和组件实例<ul><li>通过ref定义一个响应式数据，return给模板使用，组件或元素上通过ref属性绑定即可</li><li>组件渲染完毕后课获取实例和元素</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
